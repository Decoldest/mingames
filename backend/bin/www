#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("backend:server");
var http = require("http");
require("dotenv").config();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Connect to database
 */
const mongoose = require("mongoose");
const mongoDB = process.env.MONGO_URL;
const Player = require("../models/player");
const Room = require("../models/room");

mongoose
  .connect(mongoDB)
  .then(() => {
    console.log("Connected to MongoDB");
  })
  .catch((e) => {
    console.log(e);
  });

/**
 * Create socket connection.
 */
const io = require("socket.io")(server, {
  cors: {
    origin: ["http://localhost:5173"],
  },
});

/**
 * custom id for unique rooms
 */
const customID = require("custom-id");
function generateRoomID() {
  return customID({});
}

/**
 * Socket connection
 */
io.on("connection", (socket) => {
  console.log("A user connected");

  //Create room in DB and join on socket
  socket.on("create-room", async (username) => {
    try {
      const roomID = generateRoomID();
      const player = new Player({
        username: username,
        socketID: socket.id,
        isPartyLeader: true,
      });
      await player.save();

      const room = new Room({
        code: roomID,
        players: [player._id],
        isJoin: true,
        wagers: {},
        votes: {},
      });
      await room.save();

      //Join socket room
      socket.join(roomID);
      io.to(roomID).emit("room-created", roomID, username);
      console.log(`Room ${roomID} created with player ${username}`);
    } catch (err) {
      console.error("Error creating room: ", err);
    }
  });

  //Join room in DB and socket if it exists
  socket.on("join-room", async (roomID, username) => {
    try {
      const room = await Room.findOne({ code: roomID });

      // Room is available to join
      if (room && room.isJoin) {
        // Check if username already exists in the room
        const existingPlayer = await Player.findOne({
          _id: { $in: room.players },
          username: username,
        });

        if (existingPlayer) {
          socket.emit("error", "Username already taken in this room");
          return;
        }

        const player = new Player({ username, socketID: socket.id });
        await player.save();

        const updatedRoom = await Room.findByIdAndUpdate(
          room._id,
          {
            $push: { players: player._id },
          },
          { new: true },
        );

        if (!updatedRoom) {
          socket.emit("error", "Room not found");
          return;
        }

        // Join socket room
        socket.join(roomID);

        //Change frontend state to waiting room
        io.to(roomID).emit("joining-room");

        //Send message to waiting room
        io.to(roomID).emit("joined-room", username);
        console.log(`Player ${username} joined room ${roomID}`);
      } else {
        socket.emit("error", "Room not found or game has started");
      }
    } catch (error) {
      console.error("Error joining room: ", error);
      socket.emit("error", "An error occurred while trying to join the room");
    }
  });

  socket.on("send-message", (message, username, roomID) => {
    io.to(roomID).emit("receive-message", message, username);
  });

  socket.on("initiate-game", (roomID) => {
    console.log(`Room ${roomID} started playing`);
    io.to(roomID).emit("start-game");
  });

  // Find room player is disconnecting from and remove player
  socket.on("disconnect", async () => {
    try {
      const disconnectedPlayer = await Player.findOne({
        socketID: socket.id,
      });

      if (!disconnectedPlayer) {
        return;
      }

      const room = await Room.findOne({ players: disconnectedPlayer._id });

      await Player.findByIdAndDelete(disconnectedPlayer._id);

      const updatedRoom = await Room.findByIdAndUpdate(
        room._id,
        {
          $pull: { players: disconnectedPlayer._id },
        },
        { new: true },
      );

      io.to(room.code).emit("left-room", disconnectedPlayer.username);

      //Delete room if no players
      if (updatedRoom.players.length === 0) {
        await Room.findByIdAndDelete(room._id);
        console.log(
          `Room ${room._id} deleted because there are no players left.`,
        );
      }
    } catch (error) {
      console.error("Error handling disconnect: ", error);
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
