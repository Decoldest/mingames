#!/usr/bin/env node

/**
 * Module dependencies.
 */


var app = require("../app");
var debug = require("debug")("backend:server");
var http = require("http");
require("dotenv").config();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Connect to database
 */
const mongoose = require("mongoose");
const mongoDB = process.env.MONGO_URL;
const Player = require("../models/player");
const Room = require("../models/room");

mongoose
  .connect(mongoDB)
  .then(() => {
    console.log("Connected to MongoDB");
  })
  .catch((e) => {
    console.log(e);
  });

/**
 * Create socket connection.
 */
const io = require("socket.io")(server, {
  cors: {
    origin: ["http://localhost:5173"],
  },
});

/**
 * custom id for unique rooms
 */
const customID = require("custom-id");
function generateRoomID() {
  return customID({});
}

const {
  sendTriviaQuestions,
  triviaAnswered,
} = require("../utils/triviaSocket");

const { handleAfterVotingDone } = require("../utils/gameSocket");

const { giveDrink } = require("../utils/votingSocket");

const { addRacerSquirtle, squirtleWon } = require("../utils/raceSocket");

/**
 * Socket connection
 */

io.on("connection", (socket) => {
  console.log("A user connected");

  //Create room in DB and join on socket
  socket.on("create-room", async (username, callback) => {
    try {
      const roomID = generateRoomID();
      const player = new Player({
        username: username,
        socketID: socket.id,
        isPartyLeader: true,
        wonBet: null,
      });
      await player.save();

      const room = new Room({
        code: roomID,
        players: [player._id],
        isJoin: true,
        wagers: {},
        votes: {},
        state: {
          waiting: true,
          playing: false,
          isWagering: false,
          selectedGame: null,
        },
      });
      await room.save();

      //Join socket room and send message
      socket.join(roomID);
      callback({ success: true, roomID });
      io.to(roomID).emit("joined-room", username);
      console.log(`Room ${roomID} created with player ${username}`);
    } catch (err) {
      console.error("Error creating room: ", err);
    }
  });

  //Join room in DB and socket if it exists
  socket.on("join-room", async (roomID, username, callback) => {
    try {
      const room = await Room.findOne({ code: roomID });

      // Room is available to join
      if (room) {
        // Check if username already exists in the room
        const existingPlayer = await Player.findOne({
          _id: { $in: room.players },
          username: username,
        });

        if (existingPlayer) {
          socket.emit("error", "Username already taken in this room");
          return;
        }

        //Create player and add to room
        const player = new Player({
          username,
          socketID: socket.id,
          wonBet: null,
        });
        await player.save();

        const updatedRoom = await Room.findByIdAndUpdate(
          room._id,
          {
            $push: { players: player._id },
          },
          { new: true },
        );

        if (!updatedRoom) {
          socket.emit("error", "Room not found");
          return;
        }

        // Join socket room
        socket.join(roomID);

        //Change frontend state to match database and send message
        callback({ success: true, state: updatedRoom.state });

        process.nextTick(() => {
          io.to(roomID).emit("joined-room", username);
        });

        console.log(`Player ${username} joined room ${roomID}`);
      } else {
        socket.emit("error", "Room not found");
      }
    } catch (error) {
      console.error("Error joining room: ", error);
      socket.emit("error", "An error occurred while trying to join the room");
    }
  });

  socket.on("send-message", (message, username, roomID) => {
    io.to(roomID).emit("receive-message", message, username);
  });

  socket.on("initiate-game", async (roomID) => {
    try {
      await Room.findOneAndUpdate(
        {
          code: roomID,
        },
        { $set: { "state.waiting": false, "state.playing": true } },
      );
    } catch (error) {
      console.error("Error handling game start: ", error);
    }
    console.log(`Room ${roomID} started playing`);
    io.to(roomID).emit("start-game");
  });

  socket.on("initiate-wagering", async (roomID) => {
    try {
      await Room.findOneAndUpdate(
        {
          code: roomID,
        },
        { $set: { "state.isWagering": true } },
      );
    } catch (error) {
      console.error("Error handling wagering start: ", error);
    }
    io.to(roomID).emit("start-wagering");
  });

  socket.on("game-chosen", async (roomID, game) => {
    //Find the current room
    try {
      const room = await Room.findOneAndUpdate(
        {
          code: roomID,
        },
        { $set: { "state.selectedGame": game } },
        { new: true },
      );

      if (!room) {
        socket.emit("warning", "Room not found");
        return;
      }

      //Emit selection to all players in room
      io.to(roomID).emit("set-game-selection", game);

      //Fetch data or set up data for the game
      prepareGameData(io, roomID, game);
    } catch (error) {
      console.error("Error handling game selection: ", error);
    }
  });

  socket.on("place-wager", async (roomID, wager) => {
    try {
      const player = await Player.findOneAndUpdate(
        {
          socketID: socket.id,
        },
        { wager: wager },
        { new: true },
      );

      if (!player) {
        socket.emit("warning", "Player not found");
        return;
      }

      // // Check if all players in the room have placed their wagers
      const room = await Room.findOne({ code: roomID }).populate("players");

      if (!room) {
        socket.emit("warning", "Room not found");
        return;
      }

      const allPlayersWagered = room.players.every(
        (player) => player.wager > 0,
      );

      //Let all players know wagers placed
      if (allPlayersWagered) {
        await Room.findOneAndUpdate(
          {
            code: roomID,
          },
          { $set: { "state.isWagering": false } },
        );
        io.to(roomID).emit("all-wagers-placed");
      }
    } catch (error) {
      console.error("Error handling wager: ", error);
    }
  });

  socket.on("trivia-answered", async (roomID, correctAnswer, choice) => {
    triviaAnswered(socket, io, roomID, correctAnswer, choice);
  });

  //Change the state of votingData and sends to client
  socket.on("add-drink", async (roomID, username, name) => {
    giveDrink(io, roomID, username, name);
  });

  socket.on("done-voting-phase", async (roomID) => {
    handleAfterVotingDone(socket, io, roomID);
  });

  socket.on("add-squirtle", async (squirtle, username, roomID, callback) => {
    addRacerSquirtle(socket, io, squirtle, username, roomID, callback);
  });

  socket.on("won-race", async (squirtle, roomID) => {
    squirtleWon(roomID, io, squirtle);
  });

  // Find room player is disconnecting from and remove player
  socket.on("disconnect", async () => {
    try {
      const disconnectedPlayer = await Player.findOne({
        socketID: socket.id,
      });

      if (!disconnectedPlayer) {
        return;
      }

      const room = await Room.findOne({ players: disconnectedPlayer._id });

      //Delete player then remove that player from the room
      await Player.findByIdAndDelete(disconnectedPlayer._id);

      const updatedRoom = await Room.findByIdAndUpdate(
        room._id,
        {
          $pull: { players: disconnectedPlayer._id },
        },
        { new: true },
      );

      io.to(room.code).emit("left-room", disconnectedPlayer.username);

      //Delete room if no players
      if (updatedRoom.players.length === 0) {
        await Room.findByIdAndDelete(room._id);
        console.log(
          `Room ${room._id} deleted because there are no players left.`,
        );
      }
    } catch (error) {
      console.error("Error handling disconnect: ", error);
    }
  });
});

function prepareGameData(io, roomId, game) {
  if (game === "Trivia") {
    sendTriviaQuestions(io, roomId);
  }
}

module.exports = { io };

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
